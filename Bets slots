// Plataforma BETS SLOTS - Jogos de Casino

const express = require('express'); const cors = require('cors'); const bodyParser = require('body-parser'); const axios = require('axios'); const app = express(); const port = 3000;

app.use(cors()); app.use(express.json()); app.use(bodyParser.json());

let users = []; let balances = {}; let transactions = {}; let games = {}; let bonusesClaimed = {}; const MIN_BET = 0.5; const BONUS_AMOUNT = 15; const DAILY_BONUS = 5; let lastDailyBonus = {};

// Função para registrar transações const recordTransaction = (username, type, amount) => { if (!transactions[username]) { transactions[username] = []; } transactions[username].push({ type, amount, date: new Date().toISOString() }); };

// Resgatar bônus de R$15 apenas uma vez por usuário app.post('/claim-bonus', (req, res) => { const { username } = req.body; if (!users.includes(username)) { return res.status(404).json({ message: 'Usuário não encontrado!' }); } if (bonusesClaimed[username]) { return res.status(400).json({ message: 'Bônus já foi resgatado anteriormente!' }); }

balances[username] = (balances[username] || 0) + BONUS_AMOUNT;
bonusesClaimed[username] = true;
recordTransaction(username, 'Bônus de boas-vindas', BONUS_AMOUNT);

res.json({ message: `Bônus de R$${BONUS_AMOUNT} resgatado com sucesso!`, newBalance: balances[username] });

});

// Resgatar bônus diário de R$5 app.post('/claim-daily-bonus', (req, res) => { const { username } = req.body; if (!users.includes(username)) { return res.status(404).json({ message: 'Usuário não encontrado!' }); }

const today = new Date().toISOString().split('T')[0];
if (lastDailyBonus[username] === today) {
    return res.status(400).json({ message: 'Bônus diário já foi resgatado hoje!' });
}

balances[username] = (balances[username] || 0) + DAILY_BONUS;
lastDailyBonus[username] = today;
recordTransaction(username, 'Bônus diário', DAILY_BONUS);

res.json({ message: `Bônus diário de R$${DAILY_BONUS} resgatado!`, newBalance: balances[username] });

});

// Gerar 300 jogos aleatórios for (let i = 1; i <= 300; i++) { games[game_${i}] = { name: Jogo ${i}, type: ['Caça-níquel', 'Cartas', 'Roleta', 'Dados', 'Loteria', 'Arcade'][Math.floor(Math.random() * 6)], minBet: MIN_BET, maxMultiplier: (Math.random() * 10 + 1).toFixed(2) // Multiplicador até 10x }; }

// Listar todos os jogos disponíveis app.get('/games', (req, res) => { res.json(Object.values(games)); });

// Apostar em um jogo app.post('/play', (req, res) => { const { username, gameId, amount } = req.body; if (!users.includes(username)) { return res.status(404).json({ message: 'Usuário não encontrado!' }); } if (!games[gameId]) { return res.status(404).json({ message: 'Jogo não encontrado!' }); } if (amount < games[gameId].minBet) { return res.status(400).json({ message: Aposta mínima é de R$${games[gameId].minBet} }); } if (balances[username] < amount) { return res.status(400).json({ message: 'Saldo insuficiente!' }); }

balances[username] -= amount;
recordTransaction(username, `Aposta ${games[gameId].name}`, -amount);

const multiplier = (Math.random() * games[gameId].maxMultiplier).toFixed(2);
const winnings = amount * multiplier;
balances[username] += winnings;
recordTransaction(username, `Ganho ${games[gameId].name}`, winnings);

res.json({
    message: `Você jogou ${games[gameId].name} e ganhou R$${winnings}!`,
    newBalance: balances[username]
});

});

app.listen(port, () => { console.log(Servidor rodando em http://localhost:${port}); });
